apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

apply from: "$rootDir/buildscripts/ktlint.gradle"
apply from: "$rootDir/buildscripts/testlog.gradle"
apply from: "$rootDir/buildscripts/detekt.gradle"
apply from: "$rootDir/buildscripts/jacoco.gradle"
apply from: "$rootDir/buildscripts/maven-check.gradle"
apply from: "$rootDir/buildscripts/git-hash.gradle"

dependencies {

    // QMobile libraries
    if (System.getenv('CI_DEPS_TO_BE_FETCHED')) {
        implementation(QMobileAPI) { changing = true }
        implementation(QMobileDataStore) { changing = true }
        implementation(QMobileDataSync) { changing = true }
    } else {
        implementation project(':qmobileapi')
        implementation project(':qmobiledatastore')
        implementation project(':qmobiledatasync')
    }

    // Common
    implementation Libs.androidx_constraintlayout
    implementation Libs.androidx_preference_ktx
    implementation Libs.kotlin_stdlib
    implementation Libs.swiperefreshlayout
    implementation Libs.viewpager2

    // Lifecycle
    implementation Libs.lifecycle_process
    implementation Libs.lifecycle_runtime
    kapt Libs.lifecycle_compiler

    // Room
    implementation Libs.androidx_room
    implementation Libs.androidx_room_runtime
    kapt Libs.androidx_room_compiler

    // Jackson
    implementation Libs.jackson
    implementation Libs.jackson_yaml

    // Paging
    implementation Libs.androidx_paging3

    // Glide
    implementation Libs.glide
    implementation Libs.glide_transformations
    kapt Libs.glide_compiler

    // Navigation
    implementation Libs.androidx_navigation_fragment
    implementation Libs.androidx_navigation_ui

    // Rx
    implementation Libs.rxjava

    // Utils
    implementation Libs.dynamic_toasts
    implementation Libs.material
    implementation Libs.retrofit_converter_gson
    implementation Libs.timber

    // Fragment
    implementation Libs.fragment

    // Testing
    testImplementation Libs.json
    testImplementation Libs.junit
    testImplementation Libs.mockito
    testImplementation Libs.mockk

    // Camera
    implementation Libs.camerax_core
    implementation Libs.camerax_camera2
    implementation Libs.camerax_lifecycle
    implementation Libs.camerax_view
    implementation Libs.camerax_extensions

    //Barcode scan
    implementation Libs.MLKit_scan
}


def libraryGroupId = 'com.qmobile.qmobileui'
def libraryArtifactId = 'qmobileui'
def libraryVersion = Versions.qmobileui
def buildVariant = 'release'

publishing {
    publications {
        aar(MavenPublication) {
            groupId libraryGroupId
            version libraryVersion + '-' + currentGitBranch()

            artifactId libraryArtifactId
            artifact("$buildDir/outputs/aar/${artifactId}-${buildVariant}.aar")

            pom.withXml {
                def dependencies = asNode().appendNode('dependencies')
                configurations.getByName("${buildVariant}CompileClasspath").getResolvedConfiguration().getFirstLevelModuleDependencies().each {
                    def dependency = dependencies.appendNode('dependency')
                    dependency.appendNode('groupId', it.moduleGroup)
                    dependency.appendNode('artifactId', it.moduleName)
                    dependency.appendNode('version', it.moduleVersion)
                }
            }
        }
    }
}

artifactory {
    def machineIP = System.getenv('ARTIFACTORY_MACHINE_IP')
    contextUrl = "http://${machineIP}:8081/artifactory"
    publish {
        repository {
            repoKey = "libs-release-local"
            username = System.getenv('ARTIFACTORY_USERNAME')
            password = System.getenv('ARTIFACTORY_PASSWORD')
        }
        defaults {
            publications('aar')
            publishArtifacts = true
            publishPom = true
            properties = ['qa.level': 'basic', 'q.os': 'android', 'dev.team': 'core']
        }
    }
}

task generateMySources(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}
task addMySourcesToAar(type: Jar) {
    archiveFileName.set("${libraryArtifactId}WithSources.aar")
    destinationDirectory.set(file("build"))
    from zipTree("build/outputs/aar/${libraryArtifactId}-${buildVariant}.aar")
    from fileTree("build").include("libs/${libraryArtifactId}-sources.jar")
}
afterEvaluate { project ->
    project.tasks.preBuild.dependsOn generateMySources
    project.addMySourcesToAar.dependsOn build
}
artifacts {
    archives addMySourcesToAar.archivePath
}

artifactoryPublish {
    doFirst {
        uploadGitHash(libraryArtifactId)
    }
}